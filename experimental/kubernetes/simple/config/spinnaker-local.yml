# This file is intended to serve as a master configuration for a Spinnaker deployment.
# Customizations to the deployment should be made in another file named
# "spinnaker-local.yml". The distribution has a prototype called
# "default-spinnaker-local.yml" which calls out the subset of attributes of general
# interest. It can be copied into a "spinnaker-local.yml" to start with. The prototype
# does not change any of the default values here, it just surfaces the more critical
# attributes.

global:
  spinnaker:
    environment: test

services:
  default:
    # These defaults can be modified to change all the spinnaker subsystems
    # (clouddriver, gate, etc) at once, but not external systems (jenkins, etc).
    # Individual systems can still be overridden using their own section entry
    # directly under 'services'.
    host: localhost
    protocol: http

  clouddriver:
    host: spin-clouddriver.spinnaker
    port: 7002
    baseUrl: ${services.default.protocol}://${services.clouddriver.host}:${services.clouddriver.port}
    # Controls whether UserDataProviders are used to populate user data of new server groups.
    # If false, user data is copied over from ancestor server groups on both CopyLastAsgAtomicOperation and
    # ModifyAsgLaunchConfigurationOperation (only if no user data is provided on the given request).
    aws:
      udf:
        enabled: true

  echo:
    enabled: true
    host: spin-echo.spinnaker
    port: 8089
    baseUrl: ${services.default.protocol}://${services.echo.host}:${services.echo.port}
    cron:
      enabled: true
    notifications:
      # allow pipeline triggers to run periodically via cron expressions
      # If you wish for spinnaker to send notifications, configure the following blocks
      mail:
        enabled: false
        host: # the smtp host
        fromAddress: #the address for which emails are sent from
      hipchat:
        enabled: false
        url: # the hipchat server to connect to
        token: #the hipchat auth token
      sms:
        enabled: false
        account: # twilio account id
        token: # twilio auth token
        from: # phone number by which sms messages are sent
      slack:
        enabled: false
        token: # the part after http://hooks.slack.com/services/

  deck:
    host: spin-deck.spinnaker
    port: 9000
    baseUrl: ${services.default.protocol}://${services.deck.host}:${services.deck.port}
    gateUrl: ${services.gate.baseUrl}
    bakeryUrl: ${services.bakery.baseUrl}
    timezone: 'America/New_York'
    auth:
      enabled: false

  front50:
    host: spin-front50.spinnaker
    port: 8080
    baseUrl: ${services.default.protocol}://${services.front50.host}:${services.front50.port}

    # If using storage bucket persistence (gcs or s3), specify the bucket here
    # disable cassandra and enable the storage service below.
    storage_bucket: # Needs to be a globally unique name. Pick something clever.
    bucket_root: front50

    cassandra:
      enabled: false
    redis:
      enabled: false
    gcs:
      enabled: false # Enable me
      project: # Set me
    s3:
      enabled: false # Or me

  gate:
    host: spin-gate.spinnaker
    port: 8084
    baseUrl: ${services.default.protocol}://${services.gate.host}:${services.gate.port}

  igor:
    # If you are integrating Jenkins then you must also enable Spinnaker's
    # "igor" subsystem.
    enabled: false
    host: spin-igor.spinnaker
    port: 8088
    baseUrl: ${services.default.protocol}://${services.igor.host}:${services.igor.port}

  kato:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  mort:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  orca:
    host: spin-orca.spinnaker
    port: 8083
    baseUrl: ${services.default.protocol}://${services.orca.host}:${services.orca.port}
    enabled: true

  oort:
    host: ${services.clouddriver.host}
    port: ${services.clouddriver.port}
    baseUrl: ${services.clouddriver.baseUrl}

  rosco:
    host: spin-rosco.spinnaker
    port: 8087
    baseUrl: ${services.default.protocol}://${services.rosco.host}:${services.rosco.port}
    # You need to provide the fully-qualified path to the directory containing the packer templates.
    # They typically live in rosco's config/packer directory.
    configDir: /opt/rosco/config/packer

  bakery:
    host: ${services.rosco.host}
    port: ${services.rosco.port}
    baseUrl: ${services.rosco.baseUrl}
    extractBuildDetails: true

  docker:
    # This target repository is used by the bakery to publish baked docker images.
    # Do not include http://.
    targetRepository: # Optional, but expected in spinnaker-local.yml if specified.

  jenkins:
    # The "name" entry is used for the display name when selecting
    # this server. You must set `enabled` to true when enabling igor.
    #
    # If you have multiple jenkins servers, you will need to list
    # them in an igor-local.yml. See jenkins.masters in config/igor.yml.
    #
    # Note that jenkins is not installed with Spinnaker so you must obtain this
    # on your own if you are interested.
    enabled: ${services.igor.enabled:false}
    defaultMaster:
      name: Jenkins
      baseUrl:   # Expected in spinnaker-local.yml
      username:  # Expected in spinnaker-local.yml
      password:  # Expected in spinnaker-local.yml

  redis:
    host: data-redis-server.spinnaker
    port: 6379
    connection: redis://${services.redis.host}:${services.redis.port}

providers:
  aws:
    # If you want to deploy some services to Amazon Web Services (AWS),
    # set enabled and provide credentials.
    # Enabling AWS is independent of other providers.
    enabled: false
    simpleDBEnabled: false
    defaultRegion: us-east-1
    defaultSimpleDBDomain: CLOUD_APPLICATIONS
    primaryCredentials:
      name: default
      # The actual credentials are set using a standard AWS client library mechanism
      # http://docs.aws.amazon.com/AWSSdkDocsJava/latest/DeveloperGuide/credentials.html
      # Typically this is a $HOME/.aws/credentials file (remember, a standard
      # spinnaker installation runs as user "spinnaker" whose $HOME is
      # /home/spinnaker). The primaryCredentials.name will identify which profile
      # to use (for .aws/credentials).

  google:
    # If you want to deploy some services to Google Cloud Platform (google),
    # set enabled and provide primary credentials for deploying.
    # Enabling google is independent of other providers.
    enabled: false
    defaultRegion: us-central1
    defaultZone: us-central1-f
    primaryCredentials:
      name: my-account-name
      # The project is the Google Project ID for the project to manage with
      # Spinnaker. The jsonPath is a path to the JSON service credentials
      # downloaded from the Google Developer's Console.
      project: my-project
      jsonPath: /root/.gcp/account.json
  cf:
    # If you want to deploy some services to Cloud Foundry (cf),
    # set enabled and provide primary credentials for deploying.
    # Enabling cf is independent of other providers.
    enabled: false
    defaultOrg: spinnaker-cf-org
    defaultSpace: spinnaker-cf-space
    primaryCredentials:
      name: my-cf-account
      api: my-cf-api-uri
      console: my-cf-console-base-url
    # You must also supply cf.account.username and cf.account.password through env properties
  azure:
    # If you want to deploy some services to Microsoft Azure (azure),
    # set enabled and provide primary credentials for deploying.
    # Enabling azure is independent of other providers.
    enabled: false
    defaultRegion: West US
    primaryCredentials:
      name: my-azure-account
  titan:
    # If you want to deploy some services to titan,
    # set enabled and provide primary credentials for deploying.
    # Enabling titan is independent of other providers.
    enabled: false
    defaultRegion: us-east-1
    primaryCredentials:
      name: my-titan-account
  kubernetes:
    # If you want to deploy some services to kubernetes,
    # set enabled and provide primary credentials for deploying.
    # Furthermore, you need to enable the docker registry account.
    # Enabling kubernetes is independent of other providers.
    enabled: false
    primaryCredentials:
      name: my-kubernetes-account
      dockerRegistryAccount: ${providers.dockerRegistry.primaryCredentials.name}

  dockerRegistry:
    # If you want to use a container based provider, you need to configure and
    # enable this provider to cache images.
    enabled: false
    primaryCredentials:
      name: my-docker-registry
      address: https://index.docker.io/
      repository: library/nginx

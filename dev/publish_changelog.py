#!/usr/bin/python
#
# Copyright 2017 Google Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Creates and publishes changelog post for the spinnaker.github.io site.
#
# 'Publishing' in this case means creating a new file, 'git add'ing it to the
# local git repository for spinnaker.github.io, and then pushing a commit
# to origin/master.
#
# A private key that has access to --github_publisher's repos needs to be added
# to a running ssh-agent on the machine this script will run on:
#
# > <copy or rsync the key to the vm>
# > eval `ssh-agent`
# > ssh-add ~/.ssh/<key with access to github repos>
#
# If you are running this script on Jenkins, you can configure Jenkins to handle SSH credentials.

import argparse
import datetime
import os
import re
import sys

from github import Github

from publish_bom import BomPublisher
from spinnaker.run import check_run_quick

# Path to the posts directory in the spinnaker.github.io site.
POSTS_DIR = '_changelogs'

class ChangelogPublisher(BomPublisher):

  def __init__(self, options, changelog_gist_uri=None):
    self.__changelog_branch = ''
    self.__changelog_gist_uri = changelog_gist_uri or options.changelog_gist_uri
    self.__github_publisher = options.github_publisher
    self.__github_token = options.github_token
    self.__github = Github(self.__github_publisher, self.__github_token)
    self.__githubio_repo_uri = ('git@github.com:{user}/spinnaker.github.io.git'
                                .format(user=self.__github_publisher))
    self.__version = options.release_version

  def __checkout_githubio_repo(self):
    """Clones the spinnaker.github.io git repo.
    """
    check_run_quick('git clone {0}'.format(self.__githubio_repo_uri))

  def __format_changelog_post(self):
    # Initialized with 'front matter' necessary for the post.
    # Also tag the post so we can group by <major>.<minor> version.
    timestamp = '{:%Y-%m-%d %H:%M:%S %Z}'.format(datetime.datetime.utcnow())
    major, minor, _ = self.__version.split('.')
    version_post_tag = '.'.join([major, minor])
    post_lines = [
      '---',
      'title: Version {version}'.format(version=self.__version),
      'date: {date}'.format(date=timestamp),
      'tags: "changelogs {0}"'.format(version_post_tag),
      '---',
      ''
    ]

    # Since we include the changelog gist as a script, make sure we're
    # referring to the gist javascript file.
    if self.__changelog_gist_uri and not self.__changelog_gist_uri.endswith('.js'):
      self.__changelog_gist_uri = self.__changelog_gist_uri + '.js'

    post_lines.append('<script src="{uri}"></script>'.format(uri=self.__changelog_gist_uri))
    post = '\n'.join(post_lines)
    return post

  def __publish_post(self, post_content):
    post_name = '{version}-changelog.md'.format(version=self.__version)
    repo_name = os.path.basename(self.__githubio_repo_uri)

    if repo_name.endswith('.git'):
      repo_name = re.sub('.git$', '', repo_name)

    post_path = os.path.join(repo_name, POSTS_DIR, post_name)
    # Path to post file relative to the git root.
    post_rel_path = os.path.join(POSTS_DIR, post_name)
    with open(post_path, 'w') as post_file:
      post_file.write(post_content)

    # Create a new branch based on upstream/master to push the changelog to.
    check_run_quick('git -C {0} remote add upstream git@github.com:spinnaker/spinnaker.github.io.git'
                    .format(repo_name))
    check_run_quick('git -C {0} fetch upstream'.format(repo_name))
    self.__changelog_branch = '{version}-changelog'.format(version=self.__version)
    check_run_quick('git -C {0} checkout -b {1}'.format(repo_name, self.__changelog_branch))
    check_run_quick('git -C {0} add {1}'.format(repo_name, post_rel_path))
    message = 'Changelog for version {0} auto-generated by {1}'.format(self.__version, os.path.basename(__file__))
    check_run_quick('git -C {0} commit -m "{1}"'.format(repo_name, message))
    check_run_quick('git -C {0} push -f origin {1}'.format(repo_name, self.__changelog_branch))

  def __open_changelog_pull_request(self):
    """Opens a pull request from --github_publisher's repo to the upstream 'spinnaker' repo.

    Uses 'hub' to open the pull request (https://github.com/github/hub).
    This assumes that 'hub' is installed on the machine running this script.
    """
    title = 'Changelog for version {0}'.format(self.__version)
    branch_head = '{user}:{branch}'.format(user=self.__github_publisher, branch=self.__changelog_branch)
    with open('message', 'w') as msg_file:
      # TODO(jacobkiefer): Add notification to spinnaker/google-reviewers in body.
      message = '{title}'.format(title=title)
      msg_file.write(message)

    base = 'spinnaker:master'
    check_run_quick('hub -C spinnaker.github.io pull-request -b {base} -h {head} -F message'
                    .format(base=base, head=branch_head, msg=''))

  def publish_changelog(self):
    self.__checkout_githubio_repo()
    post = self.__format_changelog_post()
    self.__publish_post(post)
    self.__open_changelog_pull_request()

  @classmethod
  def init_argument_parser(cls, parser):
    """Initialize command-line arguments."""
    parser.add_argument('--changelog_gist_uri', default='',
                        help='The URI of the changelog gist to publish.')
    super(ChangelogPublisher, cls).init_argument_parser(parser)

  @classmethod
  def main(cls):
    parser = argparse.ArgumentParser()
    cls.init_argument_parser(parser)
    options = parser.parse_args()

    changelog_publisher = cls(options)
    changelog_publisher.publish_changelog()


if __name__ == '__main__':
  sys.exit(ChangelogPublisher.main())
